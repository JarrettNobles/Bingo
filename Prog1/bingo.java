import java.util.*;
import java.util.Arrays;
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;



public class bingo
{
	public static void main(String [] args)
	{
		//5 by 5 array that is the bingo card
		int [][] bingoCard = new int[5][5];
		//The bit-set stores the numbers that were chosen
		BitSet numMatch = new BitSet(76);
		//Fill the array with the file bingo.in
		fillCard(bingoCard);
		//print the bingo card
		printCard(bingoCard);
		//play bingo
		playGame(bingoCard, numMatch);
	

	}
	//PRE: Bingo card is blank
	//POST: take input from bingo.in and populate the array
	public static void fillCard(int [][] bingoCard)
	{
		try
		{	
			String readBingoFile = "bingo.in";	
			Scanner fileInput = new Scanner(System.in);
			fileInput = new Scanner(new File(readBingoFile));
	
			while(fileInput.hasNext())
			{
				int num=0;
				for(int i=0; i < 5; i++)
				{
					for(int j = 0; j < 5; j++)
					{
						num = fileInput.nextInt();
						bingoCard[i][j]=num;
					}
				}

			}
			fileInput.close();

		}
		catch(FileNotFoundException e)
		{
			System.err.println(e.getMessage());
			// System.out.println("Error");
		}
	
	}	
	//PRE: The BINGO card is populated, but not yet printed 
	//Print card method
	public static void printCard(int [][] bingoCard)
	{

		System.out.println();
		System.out.println("\t" + "  YOUR BINGO CARD  ");
		System.out.println("\t" + "  B"+ "   "+ "I" + "   " + "N" + "   "+ "G" +"   "+"O");
		System.out.println("\t"	+ "------------------------");
		for(int i = 0; i < 5; i++)
		{
			System.out.print("\t");
			for(int j = 0; j < 5; j++)
			{
				System.out.print("| ");
				if(bingoCard[i][j] < 10)
				
					System.out.print("  ");
				
				 if(bingoCard[i][j] == 0)
				
					System.out.print("X");
				
				else
				
					System.out.print(bingoCard[i][j] + " ");
				
			}
			System.out.println();
			System.out.println("\t" + "------------------------");
		} 

	}
	//PRE: Cannot play the game without the random numbers first, but the card will print 
	//POST:printRandNums method will print the random integers 1-75 that the playGame method calls.
	public static int printRandNums(BitSet numMatch, int [][] bingoCard, int count)
	{
		int randomNum;
		int increment = 0;
		//chooses the integers to be called from 1-75
		randomNum = (int)(Math.random() * 74.0 + 1.0);
		if (!numMatch.get(randomNum))
		{
			numMatch.set(randomNum);
			System.out.print(randomNum + "   ");
			if(randomNum < 10)
				System.out.print(" ");
			checkForMatch(bingoCard, randomNum);
			increment = 1;
		}
		if(increment == 1 && (count == 14 || count == 29 || count == 44 || count == 59))
		{
			System.out.println();
		}
	
		return increment;

	}
	
	//PRE: printRandNums is required for the playGame method to run
	//POST: runs through the entire game, decides bingo win type and prints it
	public static void playGame(int [][] bingoCard, BitSet numMatch)
	{
		int win = 0;
		int gameCount = 0;
		System.out.println("\t" + "The Bingo Numbers picked at random are: ");
		
		while(win == 0)
		{
			gameCount += printRandNums(numMatch, bingoCard, gameCount);	
			win = checkForWin(bingoCard);
			
		}
		System.out.println("");
		String bingoWinType = "";
		//if statements to decide whether a win is horizontal or verticle
		if(win == 1)
		{
			bingoWinType = "Horizontal Win";
		}
		if(win == 2)
		{
			bingoWinType = "Vertical Win";
		}
		if(win == 3)
		{
			bingoWinType = "Diagonal Win";
		}
		System.out.println("You have a " + bingoWinType + " after " + gameCount + "  picks ");
		System.out.println();
		System.out.println("\t" + "Your Winning Bingo Card: ");
		System.out.println();
		printCard(bingoCard);
	}
	//PRE: the CheckForWin method and playGame method runs first and then the checkForMatch method checks for a numerical match
	//POST: This method will check for a match in the values on the bingo card and values generated by the PrintRandNums method
	public static void checkForMatch(int [][] bingoCard, int num)
	{
		boolean match = false;
		for(int i = 0; i < bingoCard.length; i++)
		{
			for(int j = 0; j < bingoCard[0].length; j++)
			{
				if( num == bingoCard[i][j])
				{
					cardMarked(i, j, bingoCard);
				}
			}
		} 
	}
	//PRE: playGame, checkForWin, and checkForMatch will play the game, then search for if there is a match
	//POST: marks the bingo card 
	public static void cardMarked(int i, int j, int [][] bingoCard)
	{
		bingoCard[i][j] = 0;
	}
	//PRE: playGame has been called and now it needs to check if there is a match between the two
	//POST: Finds out if the user has won a game of bingo	
	public static int checkForWin(int[][] bingoCard)
	{
		//Declaration of the horizontal integers
		int horizontal0 = 0, horizontal1 = 0, horizontal2 = 0, horizontal3 = 0, horizontal4 = 0;
		//Declaration of the verticle integers
		int vert0 = 0, vert1 = 0, vert2 = 0, vert3 = 0, vert4 = 0;
		//Declaration of the diagonal integers
		int diag1 = 0, diag2=0;
		 
		
		
		//for loop #1 will solve for diagonal matches on diag1
		for(int i = 0; i < bingoCard.length; i++)
		{
			diag1 += bingoCard[i][i];
		}

		//for loop #2 will solve for diagonal matches on diag2
		for(int i = 0; i < bingoCard.length; i++)
		{
			diag1 += bingoCard[i][bingoCard.length-1-i];
		}

		//for loop #3 checks for horizontal matches
		for(int i = 0; i < bingoCard.length; i++)
		{
			for(int j = 0; j < bingoCard[0].length; j++)	
			{
				horizontal0 += bingoCard[0][j];
			}
			for(int j = 0; j < bingoCard[1].length; j++)
			{
				horizontal1 += bingoCard[1][j];
			}
			for(int j = 0; j < bingoCard[2].length; j++)
			{
				horizontal2 += bingoCard[2][j];
			}
			for(int j = 0; j < bingoCard[3].length; j++)
			{
				horizontal3 += bingoCard[3][j];
			}
			for(int j = 0; j < bingoCard[4].length; j++)
			{
				horizontal4 += bingoCard[4][j];
			}
			if(horizontal0 == 0 || horizontal1 == 0 || horizontal2 == 0 || horizontal3 == 0 || horizontal4 == 4 )
			{
				return 3; 
			}	
		}

		//for loop #4 checks for vertical matches
		for(int j = 0; j < bingoCard[0].length; j++)
		{
			for(int i = 0; i < bingoCard.length; i++)
			{
				vert0 += bingoCard[i][0];
			}
			for(int i = 0; i < bingoCard[1].length; i++)
			{
				vert1 += bingoCard[i][1];
			}
			for(int i = 0; i < bingoCard[2].length; i++)
			{
				vert2 += bingoCard[i][2];
			}
			for(int i = 0; i < bingoCard[3].length; i++)
			{
				vert3 += bingoCard[i][3];
			}
			for(int i = 0; i < bingoCard[4].length; i++)
			{
				vert4 += bingoCard[i][4];
			}
			if(vert0 == 0 || vert1 == 0 || vert2 == 0 || vert3 == 0 || vert4 == 4 )
			{
				return 2; 
			}
		}
		return 0;		
	}
	
}




	
